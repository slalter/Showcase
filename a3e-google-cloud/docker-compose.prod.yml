services:
  web:
    build: .
    ports:
      - "5000:5000"
    volumes:
      - .:/app
    depends_on:
      - db
      - alembic
    environment:
      - CONTAINER_ROLE=web
      - DATABASE_URL=postgresql://user:password@db:5432/mydatabase
      - FLASK_APP=app.py
      - WEB_NAME=web
      - PORT=5000
    networks:
      - main_network

  alembic:
    build: 
      context: .
      dockerfile: Dockerfile.alembic
    volumes:
      - .:/app
    depends_on:
      - db
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/mydatabase
      - FLASK_APP=app.py
      - PORT=5000
      - WEB_NAME=web
      - REDIS_NAME=redis
    networks:
      - main_network

  db:
    image: postgres:latest
    command: ["postgres", "-c", "max_connections=100","-c","shared_buffers=8096MB","-c","work_mem=256MB"]
    volumes:
      - /mnt/data/db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - main_network


  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod:/etc/nginx/conf.d
      - ./certs:/etc/nginx/certs:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - web
    networks:
      - main_network

  #to reset cert: docker compose exec certbot certbot certonly --webroot --webroot-path=/var/www/certbot --email '' --agree-tos --no-eff-email --force-renewal --domains start.a3e.com
  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c"
    command: >
      'certbot certonly --webroot --webroot-path=/var/www/certbot --email '' --agree-tos --no-eff-email --domains start.a3e.com --keep-until-expiring &&
      trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'
    depends_on:
      - nginx
      - web
    networks:
      - main_network
  
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - main_network
    volumes:
      - redis-data:/data

      

volumes:
  postgres_data:
  redis-data:

networks:
  main_network:
    driver: bridge
    external: true
